package com.accounting.daogen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.accounting.entity.CustomerEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CUSTOMER_ENTITY".
*/
public class CustomerEntityDao extends AbstractDao<CustomerEntity, Long> {

    public static final String TABLENAME = "CUSTOMER_ENTITY";

    /**
     * Properties of entity CustomerEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CdId = new Property(0, Long.class, "cdId", true, "_id");
        public final static Property BillCustomerNum = new Property(1, long.class, "billCustomerNum", false, "billCustomerNum");
        public final static Property CustomerName = new Property(2, String.class, "customerName", false, "customerName");
        public final static Property CustomerAddress = new Property(3, String.class, "customerAddress", false, "customerAddress");
        public final static Property Area = new Property(4, String.class, "area", false, "area");
        public final static Property Telephone = new Property(5, String.class, "telephone", false, "telephone");
        public final static Property Contacts = new Property(6, String.class, "contacts", false, "contacts");
        public final static Property ClearingForm = new Property(7, int.class, "clearingForm", false, "clearingForm");
        public final static Property CreateTime = new Property(8, long.class, "createTime", false, "createTime");
    }

    private DaoSession daoSession;


    public CustomerEntityDao(DaoConfig config) {
        super(config);
    }
    
    public CustomerEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CUSTOMER_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: cdId
                "\"billCustomerNum\" INTEGER NOT NULL UNIQUE ," + // 1: billCustomerNum
                "\"customerName\" TEXT," + // 2: customerName
                "\"customerAddress\" TEXT," + // 3: customerAddress
                "\"area\" TEXT," + // 4: area
                "\"telephone\" TEXT," + // 5: telephone
                "\"contacts\" TEXT," + // 6: contacts
                "\"clearingForm\" INTEGER NOT NULL ," + // 7: clearingForm
                "\"createTime\" INTEGER NOT NULL );"); // 8: createTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CUSTOMER_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CustomerEntity entity) {
        stmt.clearBindings();
 
        Long cdId = entity.getCdId();
        if (cdId != null) {
            stmt.bindLong(1, cdId);
        }
        stmt.bindLong(2, entity.getBillCustomerNum());
 
        String customerName = entity.getCustomerName();
        if (customerName != null) {
            stmt.bindString(3, customerName);
        }
 
        String customerAddress = entity.getCustomerAddress();
        if (customerAddress != null) {
            stmt.bindString(4, customerAddress);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(5, area);
        }
 
        String telephone = entity.getTelephone();
        if (telephone != null) {
            stmt.bindString(6, telephone);
        }
 
        String contacts = entity.getContacts();
        if (contacts != null) {
            stmt.bindString(7, contacts);
        }
        stmt.bindLong(8, entity.getClearingForm());
        stmt.bindLong(9, entity.getCreateTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CustomerEntity entity) {
        stmt.clearBindings();
 
        Long cdId = entity.getCdId();
        if (cdId != null) {
            stmt.bindLong(1, cdId);
        }
        stmt.bindLong(2, entity.getBillCustomerNum());
 
        String customerName = entity.getCustomerName();
        if (customerName != null) {
            stmt.bindString(3, customerName);
        }
 
        String customerAddress = entity.getCustomerAddress();
        if (customerAddress != null) {
            stmt.bindString(4, customerAddress);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(5, area);
        }
 
        String telephone = entity.getTelephone();
        if (telephone != null) {
            stmt.bindString(6, telephone);
        }
 
        String contacts = entity.getContacts();
        if (contacts != null) {
            stmt.bindString(7, contacts);
        }
        stmt.bindLong(8, entity.getClearingForm());
        stmt.bindLong(9, entity.getCreateTime());
    }

    @Override
    protected final void attachEntity(CustomerEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CustomerEntity readEntity(Cursor cursor, int offset) {
        CustomerEntity entity = new CustomerEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // cdId
            cursor.getLong(offset + 1), // billCustomerNum
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // customerName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // customerAddress
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // area
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // telephone
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // contacts
            cursor.getInt(offset + 7), // clearingForm
            cursor.getLong(offset + 8) // createTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CustomerEntity entity, int offset) {
        entity.setCdId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBillCustomerNum(cursor.getLong(offset + 1));
        entity.setCustomerName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCustomerAddress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setArea(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTelephone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setContacts(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setClearingForm(cursor.getInt(offset + 7));
        entity.setCreateTime(cursor.getLong(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CustomerEntity entity, long rowId) {
        entity.setCdId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CustomerEntity entity) {
        if(entity != null) {
            return entity.getCdId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CustomerEntity entity) {
        return entity.getCdId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
