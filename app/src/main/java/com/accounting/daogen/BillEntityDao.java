package com.accounting.daogen;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.accounting.entity.CustomerEntity;

import com.accounting.entity.BillEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BILL_ENTITY".
*/
public class BillEntityDao extends AbstractDao<BillEntity, Long> {

    public static final String TABLENAME = "BILL_ENTITY";

    /**
     * Properties of entity BillEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property BillId = new Property(0, Long.class, "BillId", true, "_id");
        public final static Property BillCustomerNum = new Property(1, long.class, "billCustomerNum", false, "billCustomerNum");
        public final static Property CustomerName = new Property(2, String.class, "customerName", false, "customerName");
        public final static Property CustomerAddress = new Property(3, String.class, "customerAddress", false, "customerAddress");
        public final static Property Address = new Property(4, String.class, "address", false, "address");
        public final static Property Telephone = new Property(5, String.class, "telephone", false, "telephone");
        public final static Property Consigner = new Property(6, String.class, "consigner", false, "consigner");
        public final static Property ConsignerTelephone = new Property(7, String.class, "consignerTelephone", false, "consignerTelephone");
        public final static Property Consignee = new Property(8, String.class, "consignee", false, "consignee");
        public final static Property ConsigneeTelephone = new Property(9, String.class, "consigneeTelephone", false, "consigneeTelephone");
        public final static Property ClearingForm = new Property(10, int.class, "clearingForm", false, "clearingForm");
        public final static Property Amount = new Property(11, int.class, "amount", false, "amount");
        public final static Property AmountType = new Property(12, String.class, "amountType", false, "amountType");
        public final static Property Weight = new Property(13, double.class, "weight", false, "weight");
        public final static Property WeightType = new Property(14, String.class, "weightType", false, "weightType");
        public final static Property Freight = new Property(15, double.class, "freight", false, "freight");
        public final static Property Paid = new Property(16, double.class, "paid", false, "paid");
        public final static Property Advances = new Property(17, double.class, "advances", false, "advances");
        public final static Property Sender = new Property(18, String.class, "sender", false, "sender");
        public final static Property Coverage = new Property(19, double.class, "coverage", false, "coverage");
        public final static Property Premium = new Property(20, double.class, "premium", false, "premium");
        public final static Property Collection = new Property(21, String.class, "collection", false, "collection");
        public final static Property CreateTime = new Property(22, long.class, "createTime", false, "createTime");
        public final static Property BeginAddress = new Property(23, String.class, "beginAddress", false, "beginAddress");
        public final static Property EndAddress = new Property(24, String.class, "endAddress", false, "endAddress");
        public final static Property PaidState = new Property(25, String.class, "paidState", false, "paidState");
        public final static Property Settlement = new Property(26, String.class, "settlement", false, "settlement");
    }

    private DaoSession daoSession;

    private Query<BillEntity> customerEntity_BillEntitiesQuery;

    public BillEntityDao(DaoConfig config) {
        super(config);
    }
    
    public BillEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BILL_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: BillId
                "\"billCustomerNum\" INTEGER NOT NULL ," + // 1: billCustomerNum
                "\"customerName\" TEXT," + // 2: customerName
                "\"customerAddress\" TEXT," + // 3: customerAddress
                "\"address\" TEXT," + // 4: address
                "\"telephone\" TEXT," + // 5: telephone
                "\"consigner\" TEXT," + // 6: consigner
                "\"consignerTelephone\" TEXT," + // 7: consignerTelephone
                "\"consignee\" TEXT," + // 8: consignee
                "\"consigneeTelephone\" TEXT," + // 9: consigneeTelephone
                "\"clearingForm\" INTEGER NOT NULL ," + // 10: clearingForm
                "\"amount\" INTEGER NOT NULL ," + // 11: amount
                "\"amountType\" TEXT," + // 12: amountType
                "\"weight\" REAL NOT NULL ," + // 13: weight
                "\"weightType\" TEXT," + // 14: weightType
                "\"freight\" REAL NOT NULL ," + // 15: freight
                "\"paid\" REAL NOT NULL ," + // 16: paid
                "\"advances\" REAL NOT NULL ," + // 17: advances
                "\"sender\" TEXT," + // 18: sender
                "\"coverage\" REAL NOT NULL ," + // 19: coverage
                "\"premium\" REAL NOT NULL ," + // 20: premium
                "\"collection\" TEXT," + // 21: collection
                "\"createTime\" INTEGER NOT NULL ," + // 22: createTime
                "\"beginAddress\" TEXT," + // 23: beginAddress
                "\"endAddress\" TEXT," + // 24: endAddress
                "\"paidState\" TEXT," + // 25: paidState
                "\"settlement\" TEXT);"); // 26: settlement
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BILL_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BillEntity entity) {
        stmt.clearBindings();
 
        Long BillId = entity.getBillId();
        if (BillId != null) {
            stmt.bindLong(1, BillId);
        }
        stmt.bindLong(2, entity.getBillCustomerNum());
 
        String customerName = entity.getCustomerName();
        if (customerName != null) {
            stmt.bindString(3, customerName);
        }
 
        String customerAddress = entity.getCustomerAddress();
        if (customerAddress != null) {
            stmt.bindString(4, customerAddress);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(5, address);
        }
 
        String telephone = entity.getTelephone();
        if (telephone != null) {
            stmt.bindString(6, telephone);
        }
 
        String consigner = entity.getConsigner();
        if (consigner != null) {
            stmt.bindString(7, consigner);
        }
 
        String consignerTelephone = entity.getConsignerTelephone();
        if (consignerTelephone != null) {
            stmt.bindString(8, consignerTelephone);
        }
 
        String consignee = entity.getConsignee();
        if (consignee != null) {
            stmt.bindString(9, consignee);
        }
 
        String consigneeTelephone = entity.getConsigneeTelephone();
        if (consigneeTelephone != null) {
            stmt.bindString(10, consigneeTelephone);
        }
        stmt.bindLong(11, entity.getClearingForm());
        stmt.bindLong(12, entity.getAmount());
 
        String amountType = entity.getAmountType();
        if (amountType != null) {
            stmt.bindString(13, amountType);
        }
        stmt.bindDouble(14, entity.getWeight());
 
        String weightType = entity.getWeightType();
        if (weightType != null) {
            stmt.bindString(15, weightType);
        }
        stmt.bindDouble(16, entity.getFreight());
        stmt.bindDouble(17, entity.getPaid());
        stmt.bindDouble(18, entity.getAdvances());
 
        String sender = entity.getSender();
        if (sender != null) {
            stmt.bindString(19, sender);
        }
        stmt.bindDouble(20, entity.getCoverage());
        stmt.bindDouble(21, entity.getPremium());
 
        String collection = entity.getCollection();
        if (collection != null) {
            stmt.bindString(22, collection);
        }
        stmt.bindLong(23, entity.getCreateTime());
 
        String beginAddress = entity.getBeginAddress();
        if (beginAddress != null) {
            stmt.bindString(24, beginAddress);
        }
 
        String endAddress = entity.getEndAddress();
        if (endAddress != null) {
            stmt.bindString(25, endAddress);
        }
 
        String paidState = entity.getPaidState();
        if (paidState != null) {
            stmt.bindString(26, paidState);
        }
 
        String settlement = entity.getSettlement();
        if (settlement != null) {
            stmt.bindString(27, settlement);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BillEntity entity) {
        stmt.clearBindings();
 
        Long BillId = entity.getBillId();
        if (BillId != null) {
            stmt.bindLong(1, BillId);
        }
        stmt.bindLong(2, entity.getBillCustomerNum());
 
        String customerName = entity.getCustomerName();
        if (customerName != null) {
            stmt.bindString(3, customerName);
        }
 
        String customerAddress = entity.getCustomerAddress();
        if (customerAddress != null) {
            stmt.bindString(4, customerAddress);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(5, address);
        }
 
        String telephone = entity.getTelephone();
        if (telephone != null) {
            stmt.bindString(6, telephone);
        }
 
        String consigner = entity.getConsigner();
        if (consigner != null) {
            stmt.bindString(7, consigner);
        }
 
        String consignerTelephone = entity.getConsignerTelephone();
        if (consignerTelephone != null) {
            stmt.bindString(8, consignerTelephone);
        }
 
        String consignee = entity.getConsignee();
        if (consignee != null) {
            stmt.bindString(9, consignee);
        }
 
        String consigneeTelephone = entity.getConsigneeTelephone();
        if (consigneeTelephone != null) {
            stmt.bindString(10, consigneeTelephone);
        }
        stmt.bindLong(11, entity.getClearingForm());
        stmt.bindLong(12, entity.getAmount());
 
        String amountType = entity.getAmountType();
        if (amountType != null) {
            stmt.bindString(13, amountType);
        }
        stmt.bindDouble(14, entity.getWeight());
 
        String weightType = entity.getWeightType();
        if (weightType != null) {
            stmt.bindString(15, weightType);
        }
        stmt.bindDouble(16, entity.getFreight());
        stmt.bindDouble(17, entity.getPaid());
        stmt.bindDouble(18, entity.getAdvances());
 
        String sender = entity.getSender();
        if (sender != null) {
            stmt.bindString(19, sender);
        }
        stmt.bindDouble(20, entity.getCoverage());
        stmt.bindDouble(21, entity.getPremium());
 
        String collection = entity.getCollection();
        if (collection != null) {
            stmt.bindString(22, collection);
        }
        stmt.bindLong(23, entity.getCreateTime());
 
        String beginAddress = entity.getBeginAddress();
        if (beginAddress != null) {
            stmt.bindString(24, beginAddress);
        }
 
        String endAddress = entity.getEndAddress();
        if (endAddress != null) {
            stmt.bindString(25, endAddress);
        }
 
        String paidState = entity.getPaidState();
        if (paidState != null) {
            stmt.bindString(26, paidState);
        }
 
        String settlement = entity.getSettlement();
        if (settlement != null) {
            stmt.bindString(27, settlement);
        }
    }

    @Override
    protected final void attachEntity(BillEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BillEntity readEntity(Cursor cursor, int offset) {
        BillEntity entity = new BillEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // BillId
            cursor.getLong(offset + 1), // billCustomerNum
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // customerName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // customerAddress
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // address
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // telephone
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // consigner
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // consignerTelephone
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // consignee
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // consigneeTelephone
            cursor.getInt(offset + 10), // clearingForm
            cursor.getInt(offset + 11), // amount
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // amountType
            cursor.getDouble(offset + 13), // weight
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // weightType
            cursor.getDouble(offset + 15), // freight
            cursor.getDouble(offset + 16), // paid
            cursor.getDouble(offset + 17), // advances
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // sender
            cursor.getDouble(offset + 19), // coverage
            cursor.getDouble(offset + 20), // premium
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // collection
            cursor.getLong(offset + 22), // createTime
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // beginAddress
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // endAddress
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // paidState
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26) // settlement
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BillEntity entity, int offset) {
        entity.setBillId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBillCustomerNum(cursor.getLong(offset + 1));
        entity.setCustomerName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCustomerAddress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTelephone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setConsigner(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setConsignerTelephone(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setConsignee(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setConsigneeTelephone(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setClearingForm(cursor.getInt(offset + 10));
        entity.setAmount(cursor.getInt(offset + 11));
        entity.setAmountType(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setWeight(cursor.getDouble(offset + 13));
        entity.setWeightType(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setFreight(cursor.getDouble(offset + 15));
        entity.setPaid(cursor.getDouble(offset + 16));
        entity.setAdvances(cursor.getDouble(offset + 17));
        entity.setSender(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setCoverage(cursor.getDouble(offset + 19));
        entity.setPremium(cursor.getDouble(offset + 20));
        entity.setCollection(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setCreateTime(cursor.getLong(offset + 22));
        entity.setBeginAddress(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setEndAddress(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setPaidState(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setSettlement(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BillEntity entity, long rowId) {
        entity.setBillId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BillEntity entity) {
        if(entity != null) {
            return entity.getBillId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BillEntity entity) {
        return entity.getBillId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "billEntities" to-many relationship of CustomerEntity. */
    public List<BillEntity> _queryCustomerEntity_BillEntities(long billCustomerNum) {
        synchronized (this) {
            if (customerEntity_BillEntitiesQuery == null) {
                QueryBuilder<BillEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.BillCustomerNum.eq(null));
                customerEntity_BillEntitiesQuery = queryBuilder.build();
            }
        }
        Query<BillEntity> query = customerEntity_BillEntitiesQuery.forCurrentThread();
        query.setParameter(0, billCustomerNum);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCustomerEntityDao().getAllColumns());
            builder.append(" FROM BILL_ENTITY T");
            builder.append(" LEFT JOIN CUSTOMER_ENTITY T0 ON T.\"billCustomerNum\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected BillEntity loadCurrentDeep(Cursor cursor, boolean lock) {
        BillEntity entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        CustomerEntity customerEntity = loadCurrentOther(daoSession.getCustomerEntityDao(), cursor, offset);
         if(customerEntity != null) {
            entity.setCustomerEntity(customerEntity);
        }

        return entity;    
    }

    public BillEntity loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<BillEntity> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<BillEntity> list = new ArrayList<BillEntity>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<BillEntity> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<BillEntity> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
